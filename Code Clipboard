import time
import board
import busio
import adafruit_ads1x15.ads1115 as ADS
from adafruit_ads1x15.analog_in import AnalogIn
import math

# --- User-Defined Constants and Hardware Configuration ---
# You MUST fill in these values based on your specific circuit and components.

# --- TGS 2602 Sensor Configuration ---
# The load resistor (RL) in your voltage divider circuit.
LOAD_RESISTOR_OHMS_TGS2602 = 453.0  # Ohms (Ω)
# The ADC channel your TGS 2602 sensor is connected to.
ADC_CHANNEL_TGS2602 = ADS.P0

# --- MiCS-5524 Sensor Configuration ---
# The Adafruit MiCS-5524 breakout board uses a fixed 10 kΩ load resistor.
LOAD_RESISTOR_OHMS_MICS = 10000.0 # Ohms (Ω)
# The ADC channel your MiCS-5524 sensor is connected to.
ADC_CHANNEL_MICS = ADS.P1

# --- TGS 2603 Sensor Configuration ---
# The load resistor (RL) in your voltage divider circuit.
LOAD_RESISTOR_OHMS_TGS2603 = 2545.0 # Ohms (Ω)
# The ADC channel your TGS 2603 sensor is connected to.
ADC_CHANNEL_TGS2603 = ADS.P2

# --- MiCS-2714 Sensor Configuration ---
# The load resistor (RL) on your DFRobot MiCS-2714 module.
LOAD_RESISTOR_OHMS_MICS2714 = 820.0 # Ohms (Ω)
# The ADC channel your MiCS-2714 sensor is connected to.
ADC_CHANNEL_MICS2714 = ADS.P3

# --- ADS1115 ADC Configuration ---
# The gain setting for your ADS1115. This affects the full-scale voltage range.
# For example, a gain of 1 means a range of ±4.096V, gain of 2/3 is ±6.144V.
ADS1115_GAIN = 1

# Number of readings to take for the calibration average.
CALIBRATION_READING_COUNT = 100

# --- Function Definitions ---

def calculate_sensor_resistance(adc_voltage, load_resistor_ohms):
    """
    Calculates the sensor resistance (Rs) from the ADC voltage reading.
    This is based on the voltage divider circuit formula.
    
    Args:
        adc_voltage (float): The voltage read from the ADC.
        load_resistor_ohms (float): The resistance of the load resistor in Ohms.
        
    Returns:
        float: The calculated sensor resistance in Ohms (Ω).
    """
    if adc_voltage == 0:
        return float('inf')
    
    # Define the reference voltage based on the ADS1115 gain setting.
    if ADS1115_GAIN == 1:
        adc_reference_voltage = 4.096
    elif ADS1115_GAIN == 2/3:
        adc_reference_voltage = 6.144
    else:
        adc_reference_voltage = 4.096
    
    # Rs = RL * (V_ref - V_adc) / V_adc
    rs = load_resistor_ohms * (adc_reference_voltage - adc_voltage) / adc_voltage
    return rs

def calibrate_sensor(adc_object, sensor_name, load_resistor_ohms):
    """
    Performs a calibration routine to determine the sensor's baseline resistance (Ro)
    in a clean air environment.
    
    Args:
        adc_object (AnalogIn): The analog input object for the sensor.
        sensor_name (str): The name of the sensor being calibrated.
        load_resistor_ohms (float): The load resistor for the specific sensor.
        
    Returns:
        float: The average baseline resistance (Ro) in Ohms.
    """
    print(f"\n--- Calibration Process: {sensor_name} ---")
    print("Please ensure the sensor is in a clean, fresh air environment.")
    print("Calibration will begin in 5 seconds...")
    time.sleep(5)
    
    print(f"Collecting {CALIBRATION_READING_COUNT} readings...")
    
    total_resistance = 0.0
    for i in range(CALIBRATION_READING_COUNT):
        voltage = adc_object.voltage
        resistance = calculate_sensor_resistance(voltage, load_resistor_ohms)
        total_resistance += resistance
        print(f"Reading {i+1}/{CALIBRATION_READING_COUNT} - Voltage: {voltage:.4f}V, Resistance: {resistance:.2f}Ω")
        time.sleep(0.1)
        
    avg_resistance = total_resistance / CALIBRATION_READING_COUNT
    print(f"\nCalibration complete for {sensor_name}. Baseline Resistance (Ro) = {avg_resistance:.2f}Ω")
    return avg_resistance

# --- TGS 2602 Estimation Functions ---
def estimate_ammonia_ppm_tgs2602(rs_ro_ratio):
    """Estimates Ammonia based on the TGS 2602's Rs/Ro ratio."""
    if rs_ro_ratio <= 0:
        return float('inf')
    estimated_ppm = 0.1036 * (rs_ro_ratio)**(-6.8685)
    return estimated_ppm

def estimate_hydrogen_sulfide_ppm_tgs2602(rs_ro_ratio):
    """Estimates Hydrogen Sulfide based on the TGS 2602's Rs/Ro ratio."""
    if rs_ro_ratio <= 0:
        return float('inf')
    estimated_ppm = 0.0758 * (rs_ro_ratio)**(-2.7174)
    return estimated_ppm

# --- MiCS-5524 Estimation Functions ---
def estimate_co_ppm_mics(rs_ro_ratio):
    """Estimates CO concentration from the MiCS-5524."""
    if rs_ro_ratio <= 0:
        return float('inf')
    estimated_ppm = 0.176 * (rs_ro_ratio)**(-1.05)
    return f"{estimated_ppm:.2f}"

def estimate_ethanol_ppm_mics(rs_ro_ratio):
    """Estimates Ethanol concentration from the MiCS-5524."""
    if rs_ro_ratio <= 0:
        return float('inf')
    estimated_ppm = 1.15 * (rs_ro_ratio)**(-2.05)
    return f"{estimated_ppm:.2f}"

def estimate_hydrogen_ppm_mics(rs_ro_ratio):
    """Estimates Hydrogen concentration from the MiCS-5524."""
    if rs_ro_ratio <= 0:
        return float('inf')
    estimated_ppm = 1.6 * (rs_ro_ratio)**(-1.7)
    return f"{estimated_ppm:.2f}"

def estimate_ammonia_ppm_mics(rs_ro_ratio):
    """Estimates Ammonia concentration from the MiCS-5524."""
    if rs_ro_ratio <= 0:
        return float('inf')
    estimated_ppm = 1290 * (rs_ro_ratio)**(6.72)
    return f"{estimated_ppm:.2f}"

def estimate_methane_ppm_mics(rs_ro_ratio):
    """Estimates Methane concentration from the MiCS-5524."""
    if rs_ro_ratio <= 0:
        return float('inf')
    estimated_ppm = 1.25e16 * (rs_ro_ratio)**(-28)
    return f"{estimated_ppm:.2f}"

# --- TGS 2603 Estimation Functions ---
def estimate_trimethylamine_ppm_tgs2603(rs_ro_ratio):
    """Estimates Trimethylamine based on the TGS 2603's Rs/Ro ratio."""
    if rs_ro_ratio <= 0:
        return float('inf')
    estimated_ppm = 0.2556 * (rs_ro_ratio)**(-1.379)
    return f"{estimated_ppm:.2f}"

def estimate_methyl_mercaptan_ppm_tgs2603(rs_ro_ratio):
    """Estimates Methyl Mercaptan based on the TGS 2603's Rs/Ro ratio."""
    if rs_ro_ratio <= 0:
        return float('inf')
    estimated_ppm = 0.399 * (rs_ro_ratio)**(-1.91)
    return f"{estimated_ppm:.2f}"

# --- MiCS-2714 Estimation Functions ---
def estimate_no2_ppm_mics2714(rs_ro_ratio):
    """Estimates NO2 concentration based on the MiCS-2714's Rs/Ro ratio."""
    if rs_ro_ratio <= 0:
        return float('inf')
    # Formula derived from points (0.08, 0.02) and (60, 8)
    estimated_ppm = 0.1966 * (rs_ro_ratio)**(0.905)
    return f"{estimated_ppm:.2f}"

def estimate_no_ppm_mics2714(rs_ro_ratio):
    """Estimates NO concentration based on the MiCS-2714's Rs/Ro ratio."""
    if rs_ro_ratio <= 0:
        return float('inf')
    # Formula derived from points (1, 0.1) and (0.80, 1)
    estimated_ppm = 0.1 * (rs_ro_ratio)**(-10.32)
    return f"{estimated_ppm:.2f}"

def main():
    """
    The main program loop for reading and analyzing sensor data.
    """
    print("Initializing ADS1115 and gas sensors...")
    
    try:
        # Create the I2C bus object
        i2c = busio.I2C(board.SCL, board.SDA)
        
        # Create the ADS1115 object
        ads = ADS.ADS1115(i2c, gain=ADS1115_GAIN)
        
        # Create analog input objects for all four sensors
        tgs2602_sensor_adc = AnalogIn(ads, ADC_CHANNEL_TGS2602)
        mics_sensor_adc = AnalogIn(ads, ADC_CHANNEL_MICS)
        tgs2603_sensor_adc = AnalogIn(ads, ADC_CHANNEL_TGS2603)
        mics2714_sensor_adc = AnalogIn(ads, ADC_CHANNEL_MICS2714)
        
    except Exception as e:
        print(f"Failed to initialize ADS1115: {e}")
        print("Please ensure your wiring is correct and the `adafruit-circuitpython-ads1x15` library is installed.")
        return

    # Calibrate all four sensors
    baseline_ro_tgs2602 = calibrate_sensor(tgs2602_sensor_adc, "TGS 2602", LOAD_RESISTOR_OHMS_TGS2602)
    baseline_ro_mics = calibrate_sensor(mics_sensor_adc, "MiCS-5524", LOAD_RESISTOR_OHMS_MICS)
    baseline_ro_tgs2603 = calibrate_sensor(tgs2603_sensor_adc, "TGS 2603", LOAD_RESISTOR_OHMS_TGS2603)
    baseline_ro_mics2714 = calibrate_sensor(mics2714_sensor_adc, "MiCS-2714", LOAD_RESISTOR_OHMS_MICS2714)
    
    print("\n--- Starting Gas Detection ---")
    
    while True:
        try:
            # --- Read and process TGS 2602 data ---
            current_voltage_tgs2602 = tgs2602_sensor_adc.voltage
            current_rs_tgs2602 = calculate_sensor_resistance(current_voltage_tgs2602, LOAD_RESISTOR_OHMS_TGS2602)
            rs_ro_ratio_tgs2602 = current_rs_tgs2602 / baseline_ro_tgs2602 if baseline_ro_tgs2602 > 0 else float('inf')
            
            ammonia_ppm_tgs2602 = estimate_ammonia_ppm_tgs2602(rs_ro_ratio_tgs2602)
            h2s_ppm_tgs2602 = estimate_hydrogen_sulfide_ppm_tgs2602(rs_ro_ratio_tgs2602)
            
            # --- Read and process MiCS-5524 data ---
            current_voltage_mics = mics_sensor_adc.voltage
            current_rs_mics = calculate_sensor_resistance(current_voltage_mics, LOAD_RESISTOR_OHMS_MICS)
            rs_ro_ratio_mics = current_rs_mics / baseline_ro_mics if baseline_ro_mics > 0 else float('inf')
            
            co_ppm = estimate_co_ppm_mics(rs_ro_ratio_mics)
            ethanol_ppm = estimate_ethanol_ppm_mics(rs_ro_ratio_mics)
            hydrogen_ppm = estimate_hydrogen_ppm_mics(rs_ro_ratio_mics)
            ammonia_ppm_mics = estimate_ammonia_ppm_mics(rs_ro_ratio_mics)
            methane_ppm = estimate_methane_ppm_mics(rs_ro_ratio_mics)
            
            # --- Read and process TGS 2603 data ---
            current_voltage_tgs2603 = tgs2603_sensor_adc.voltage
            current_rs_tgs2603 = calculate_sensor_resistance(current_voltage_tgs2603, LOAD_RESISTOR_OHMS_TGS2603)
            rs_ro_ratio_tgs2603 = current_rs_tgs2603 / baseline_ro_tgs2603 if baseline_ro_tgs2603 > 0 else float('inf')
            
            trimethylamine_ppm = estimate_trimethylamine_ppm_tgs2603(rs_ro_ratio_tgs2603)
            methyl_mercaptan_ppm = estimate_methyl_mercaptan_ppm_tgs2603(rs_ro_ratio_tgs2603)

            # --- Read and process MiCS-2714 data ---
            current_voltage_mics2714 = mics2714_sensor_adc.voltage
            current_rs_mics2714 = calculate_sensor_resistance(current_voltage_mics2714, LOAD_RESISTOR_OHMS_MICS2714)
            rs_ro_ratio_mics2714 = current_rs_mics2714 / baseline_ro_mics2714 if baseline_ro_mics2714 > 0 else float('inf')

            no2_ppm = estimate_no2_ppm_mics2714(rs_ro_ratio_mics2714)
            no_ppm = estimate_no_ppm_mics2714(rs_ro_ratio_mics2714)
            
            # --- Print Combined Output ---
            print(f"--- Sensor Data (ADC Gain: {ADS1115_GAIN}) ---")
            
            print(f"\n--- TGS 2602 ---")
            print(f"Resistance Ratio (Rs/Ro): {rs_ro_ratio_tgs2602:.2f}")
            print(f"Ammonia Concentration: {ammonia_ppm_tgs2602:.2f} ppm")
            print(f"Hydrogen Sulfide Concentration: {h2s_ppm_tgs2602:.2f} ppm")
            
            print(f"\n--- MiCS-5524 ---")
            print(f"Resistance Ratio (Rs/Ro): {rs_ro_ratio_mics:.2f}")
            print(f"CO Concentration: {co_ppm} ppm")
            print(f"Ethanol Concentration: {ethanol_ppm} ppm")
            print(f"Hydrogen Concentration: {hydrogen_ppm} ppm")
            print(f"Ammonia Concentration: {ammonia_ppm_mics} ppm")
            print(f"Methane Concentration: {methane_ppm} ppm")
            
            print(f"\n--- TGS 2603 ---")
            print(f"Resistance Ratio (Rs/Ro): {rs_ro_ratio_tgs2603:.2f}")
            print(f"Trimethylamine Concentration: {trimethylamine_ppm} ppm")
            print(f"Methyl Mercaptan Concentration: {methyl_mercaptan_ppm} ppm")
            
            print(f"\n--- MiCS-2714 ---")
            print(f"Resistance Ratio (Rs/Ro): {rs_ro_ratio_mics2714:.2f}")
            print(f"NO2 Concentration: {no2_ppm} ppm")
            print(f"NO Concentration: {no_ppm} ppm")
            
            print("-" * 30)
            time.sleep(2)
            
        except KeyboardInterrupt:
            print("\nExiting sensor monitoring.")
            break
        except Exception as e:
            print(f"An error occurred during detection: {e}")
            break

if __name__ == "__main__":
    main()
